{"version":3,"sources":["components/Button.js","components/Carousel.js","components/Options.js","App.js","index.js"],"names":["Buttons","swipe","this","props","className","type","onClick","React","PureComponent","Carousel","state","left","count","frameSize","flow","images","itemWidth","infinite","step","toLeft","updateCount","length","setState","applyChange","animationDuration","carouselSize","transitionDuration","style","width","transform","transition","map","link","index","id","key","src","alt","Button","Component","Options","selectOption","value","App","defaultSelectOption","defaultStep","defaultInfinity","changeFrameSize","e","newFrameSize","target","changeStep","newStep","changeInfinity","Array","fill","el","i","changeTo","htmlFor","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6220fcca.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Buttons extends React.PureComponent {\n  render() {\n    const { swipe } = this.props;\n\n    return (\n      <div className=\"container\">\n        <button\n          type=\"button\"\n          className=\"button prev\"\n          onClick={() => swipe(1)}\n        >\n          Prev\n        </button>\n        <button\n          type=\"button\"\n          className=\"button next\"\n          onClick={() => swipe(-1)}\n        >\n          Next\n        </button>\n      </div>\n    );\n  }\n}\n\nButtons.propTypes = {\n  swipe: PropTypes.func.isRequired,\n};\n\nexport default Buttons;\n","import React from 'react';\nimport './Carousel.scss';\nimport PropTypes, { string } from 'prop-types';\nimport Buttons from './Button';\n\nclass Carousel extends React.Component {\n  state = {\n    left: 0,\n    count: this.props.frameSize,\n  }\n\n  swipe = (flow) => {\n    const { images, itemWidth, frameSize, infinite, step } = this.props;\n    const { left, count } = this.state;\n    let toLeft = 0;\n    let updateCount = 0;\n\n    if (count + step > images.length && flow === -1) {\n      toLeft = (count === images.length && infinite)\n        ? 0\n        : (images.length % count) * itemWidth * flow + left;\n      updateCount = (infinite && count === images.length)\n        ? frameSize\n        : images.length;\n    } else if (flow === 1 && count < frameSize + step) {\n      if (count > step && count !== frameSize) {\n        toLeft = (count % frameSize) * itemWidth + left * flow;\n        updateCount = frameSize;\n      } else {\n        toLeft = (infinite && count === frameSize)\n          ? (images.length - frameSize) * itemWidth * -flow\n          : left;\n        updateCount = (infinite && count === frameSize)\n          ? images.length\n          : frameSize;\n      }\n    } else {\n      toLeft = itemWidth * step * flow + left;\n      updateCount = (flow === 1) ? count - step : count + step;\n    }\n\n    this.setState(() => ({\n      left: toLeft, count: updateCount,\n    }));\n  }\n\n  applyChange = () => {\n    this.setState(() => ({\n      count: this.props.frameSize,\n      left: 0,\n    }));\n  }\n\n  render() {\n    const { images, itemWidth, frameSize, animationDuration } = this.props;\n    const { left } = this.state;\n    const carouselSize = itemWidth * frameSize;\n    const transitionDuration = animationDuration / 1000;\n\n    return (\n      <>\n        <div className=\"wrap__apply\">\n          <p><strong>Click apply after change parameters!</strong></p>\n          <p>\n            (Иначе первый слайд до конца поломается,\n            <br />\n            а потом станет нормальный)\n          </p>\n          <button\n            type=\"button\"\n            onClick={this.applyChange}\n            className=\"button__apply\"\n          >\n            Apply\n          </button>\n        </div>\n        <div\n          className=\"Carousel\"\n          style={{\n            width: `${carouselSize}px`,\n          }}\n        >\n          <ul\n            className=\"Carousel__list\"\n            style={{\n              transform: `translate(${left}px)`,\n              transition: `all ${transitionDuration}s`,\n            }}\n          >\n            {images.map((link, index) => {\n              const id = index + 1;\n\n              return (\n                <li key={id}>\n                  <img\n                    style={{\n                      width: `${itemWidth}px`,\n                    }}\n                    src={link}\n                    alt={id}\n                  />\n                </li>\n              );\n            })}\n          </ul>\n\n          <Buttons swipe={this.swipe} />\n        </div>\n      </>\n    );\n  }\n}\n\nCarousel.propTypes = {\n  step: PropTypes.number.isRequired,\n  images: PropTypes.arrayOf(string).isRequired,\n  itemWidth: PropTypes.number.isRequired,\n  infinite: PropTypes.bool.isRequired,\n  frameSize: PropTypes.number.isRequired,\n  animationDuration: PropTypes.number.isRequired,\n};\n\nexport default Carousel;\n","import React from 'react';\n\nconst Options = ({ selectOption }) => (\n  selectOption.map(value => (\n    <option\n      value={value}\n      key={value}\n    >\n      {`${value}`}\n    </option>\n  ))\n);\n\nexport default Options;\n","import React from 'react';\n\nimport Carousel from './components/Carousel';\nimport Options from './components/Options';\n\nclass App extends React.Component {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    defaultSelectOption: 3,\n    defaultStep: 3,\n    defaultInfinity: true,\n  };\n\n  changeFrameSize = (e) => {\n    const newFrameSize = +e.target.value;\n\n    this.setState(() => ({ defaultSelectOption: newFrameSize }));\n  }\n\n  changeStep = (e) => {\n    const newStep = +e.target.value;\n\n    this.setState(() => ({ defaultStep: newStep }));\n  }\n\n  changeInfinity = () => {\n    this.setState(() => ({ defaultInfinity: !this.state.defaultInfinity }));\n  }\n\n  render() {\n    const { images, defaultSelectOption,\n      defaultStep, defaultInfinity } = this.state;\n    const selectOption = new Array(defaultSelectOption)\n      .fill(0)\n      .map((el, i) => i + 1);\n    const changeTo = new Array(images.length - 2).fill(0).map((el, i) => i + 2);\n    const changeInf = [true, false];\n\n    return (\n      <div className=\"App\">\n        <Carousel\n          images={images}\n          step={defaultStep}\n          frameSize={defaultSelectOption}\n          itemWidth={130}\n          animationDuration={1000}\n          infinite={defaultInfinity}\n        />\n        <div className=\"wrap\">\n          <label htmlFor=\"changeStep\">Choose to change step </label>\n          <select\n            value={defaultStep}\n            onChange={this.changeStep}\n            id=\"changeStep\"\n          >\n            <Options selectOption={selectOption} />\n          </select>\n        </div>\n        <div className=\"wrap\">\n          <label htmlFor=\"changeFrameSize\">Choose to change frame size </label>\n          <select\n            value={defaultSelectOption}\n            onChange={this.changeFrameSize}\n            id=\"changeFrameSize\"\n          >\n            <Options selectOption={changeTo} />\n          </select>\n        </div>\n        <div className=\"wrap\">\n          <label htmlFor=\"infinity\">Infinity</label>\n          <select\n            id=\"infinity\"\n            onChange={this.changeInfinity}\n          >\n            <Options selectOption={changeInf} />\n          </select>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}